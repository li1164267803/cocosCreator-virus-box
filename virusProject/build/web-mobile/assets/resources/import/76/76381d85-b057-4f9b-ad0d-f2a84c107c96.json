{"__type__":"cc.EffectAsset","_name":"Rain","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"texSize":{"value":[1280,720],"type":14},"iResolution":{"value":[1280,720,0,0],"type":16},"time":{"value":[1],"type":13}},"program":"Rain|vs|fs"}]}],"shaders":[{"hash":3818212719,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nuniform PROPERTIES {\n    vec4 color;\n    vec4 iResolution;\n    vec2 texSize;\n    float time;\n};\nvarying vec2 v_uv0;\nvec3 N13(float p) {\n    vec3 p3 = fract(vec3(p) * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat N(float t) {\n    return fract(sin(t*12345.564)*7658.76);\n}\nfloat Saw(float b, float t) {\n    return smoothstep(0., b, t)*smoothstep(1., b, t);\n}\nvec2 DropLayer2(vec2 uv, float t) {\n    vec2 UV = uv;\n    uv.y += t*0.75;\n    vec2 a = vec2(6., 1.);\n    vec2 grid = a*2.;\n    vec2 id = floor(uv*grid);\n    float colShift = N(id.x);\n    uv.y += colShift;\n    id = floor(uv*grid);\n    vec3 n = N13(id.x*35.2+id.y*2376.1);\n    vec2 st = fract(uv*grid)-vec2(.5, 0);\n    float x = n.x-.5;\n    float y = UV.y*20.;\n    float wiggle = sin(y+sin(y));\n    x += wiggle*(.5-abs(x))*(n.z-.5);\n    x *= .7;\n    float ti = fract(t+n.z);\n    y = (Saw(.85, ti)-.5)*.9+.5;\n    vec2 p = vec2(x, y);\n    float d = length((st-p)*a.yx);\n    float mainDrop = smoothstep(.4, .0, d);\n    float r = sqrt(smoothstep(1., y, st.y));\n    float cd = abs(st.x-x);\n    float trail = smoothstep(.23*r, .15*r*r, cd);\n    float trailFront = smoothstep(-.02, .02, st.y-y);\n    trail *= trailFront*r*r;\n    y = UV.y;\n    float trail2 = smoothstep(.2*r, .0, cd);\n    float droplets = max(0., (sin(y*(1.-y)*120.)-st.y))*trail2*trailFront*n.z;\n    y = fract(y*10.)+(st.y-.5);\n    float dd = length(st-vec2(x, y));\n    droplets = smoothstep(.3, 0., dd);\n    float m = mainDrop+droplets*r*trailFront;\n    return vec2(m, trail);\n}\nfloat StaticDrops(vec2 uv, float t) {\n    uv *= 40.;\n    vec2 id = floor(uv);\n    uv = fract(uv)-.5;\n    vec3 n = N13(id.x*107.45+id.y*3543.654);\n    vec2 p = (n.xy-.5)*.7;\n    float d = length(uv-p);\n    float fade = Saw(.025, fract(t+n.z));\n    float c = smoothstep(.3, 0., d)*fract(n.z*10.)*fade;\n    return c;\n}\nvec2 Drops(vec2 uv, float t, float l0, float l1, float l2) {\n    float s = StaticDrops(uv, t)*l0;\n    vec2 m1 = DropLayer2(uv, t)*l1;\n    vec2 m2 = DropLayer2(uv*1.85, t)*l2;\n    float c = s+m1.x+m2.x;\n    c = smoothstep(.3, 1., c);\n    return vec2(c, max(m1.y*l0, m2.y*l1));\n}\nvoid main()\n{\n    vec4 iMouse = vec4(0.0, 0.0, 0.0, 0.0);\n    vec2 fragCoord = vec2(-v_uv0.x * texSize.x + 0.5 * texSize.x, -0.5 * texSize.y + v_uv0.y * texSize.y);\n    vec2 uv = -fragCoord.xy / iResolution.y;\n    vec2 UV = (fragCoord.xy+.5*iResolution.xy) / iResolution.xy;\n    vec3 M = iMouse.xyz/iResolution.xyz;\n    float T = time+M.x*2.;\n    #if HAS_HEART\n        T = mod(time, 102.);\n        T = mix(T, M.x*102., M.z>0.?1.:0.);\n    #endif\n    float t = T*.2;\n    float rainAmount = iMouse.z>0. ? M.y : sin(T*.05)*.3+.7;\n    float maxBlur = mix(3., 6., rainAmount);\n    float minBlur = 2.;\n    float story = 0.;\n    float heart = 0.;\n    #if HAS_HEART\n        story = smoothstep(0., 70., T);\n        t = min(1., T/70.);\n        t = 1.-t;\n        t = (1.-t*t)*70.;\n        float zoom= mix(.3, 1.2, story);\n        uv *=zoom;\n        minBlur = 4.+smoothstep(.5, 1., story)*3.;\n        maxBlur = 6.+smoothstep(.5, 1., story)*1.5;\n        vec2 hv = uv-vec2(.0, -.1);\n        hv.x *= .5;\n        float s = smoothstep(110., 70., T);\n        hv.y-=sqrt(abs(hv.x))*.5*s;\n        heart = length(hv);\n        heart = smoothstep(.4*s, .2*s, heart)*s;\n        rainAmount = heart;\n        maxBlur-=heart;\n        uv *= 1.5;\n        t *= .25;\n    #else\n        float zoom = -cos(T*.2);\n        uv *= .7+zoom*.3;\n    #endif\n    UV = (UV-.5)*(.9+zoom*.1)+.5;\n    float staticDrops = smoothstep(-.5, 1., rainAmount)*2.;\n    float layer1 = smoothstep(.25, .75, rainAmount);\n    float layer2 = smoothstep(.0, .5, rainAmount);\n    vec2 c = Drops(uv, t, staticDrops, layer1, layer2);\n    vec2 e = vec2(.001, 0.);\n    float cx = Drops(uv+e, t, staticDrops, layer1, layer2).x;\n    float cy = Drops(uv+e.yx, t, staticDrops, layer1, layer2).x;\n    vec2 n = vec2(cx-c.x, cy-c.x);\n    #if HAS_HEART\n        n *= 1.-smoothstep(60., 85., T);\n        c.y *= 1.-smoothstep(80., 100., T)*.8;\n    #endif\n    float focus = mix(maxBlur-c.y, minBlur, smoothstep(.1, .2, c.x));\n    vec3 col = texture2D(texture, UV+n).rgb;\n    #if USE_POST_PROCESSING\n        t = (T+3.)*.5;\n        float colFade = sin(t*.2)*.5+.5+story;\n        col *= mix(vec3(1.), vec3(.8, .9, 1.3), colFade);\n        float fade = smoothstep(0., 10., T);\n        float lightning = sin(t*sin(t*10.));\n        lightning *= pow(max(0., sin(t+sin(t))), 10.);\n        col *= 1.+lightning*fade*mix(1., .1, story*story);\n        col *= 1.-dot(UV-=.5, UV);\n        #if HAS_HEART\n            col = mix(pow(col, vec3(1.2)), col, heart);\n            fade *= smoothstep(102., 97., T);\n        #endif\n        #if USE_LAOD_FADE\n        col *= fade;\n        #endif\n    #endif\n    gl_FragColor = vec4(col, 1.);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nuniform vec4 iResolution;\nuniform vec2 texSize;\nuniform float time;\nvarying vec2 v_uv0;\nvec3 N13(float p) {\n    vec3 p3 = fract(vec3(p) * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat N(float t) {\n    return fract(sin(t*12345.564)*7658.76);\n}\nfloat Saw(float b, float t) {\n    return smoothstep(0., b, t)*smoothstep(1., b, t);\n}\nvec2 DropLayer2(vec2 uv, float t) {\n    vec2 UV = uv;\n    uv.y += t*0.75;\n    vec2 a = vec2(6., 1.);\n    vec2 grid = a*2.;\n    vec2 id = floor(uv*grid);\n    float colShift = N(id.x);\n    uv.y += colShift;\n    id = floor(uv*grid);\n    vec3 n = N13(id.x*35.2+id.y*2376.1);\n    vec2 st = fract(uv*grid)-vec2(.5, 0);\n    float x = n.x-.5;\n    float y = UV.y*20.;\n    float wiggle = sin(y+sin(y));\n    x += wiggle*(.5-abs(x))*(n.z-.5);\n    x *= .7;\n    float ti = fract(t+n.z);\n    y = (Saw(.85, ti)-.5)*.9+.5;\n    vec2 p = vec2(x, y);\n    float d = length((st-p)*a.yx);\n    float mainDrop = smoothstep(.4, .0, d);\n    float r = sqrt(smoothstep(1., y, st.y));\n    float cd = abs(st.x-x);\n    float trail = smoothstep(.23*r, .15*r*r, cd);\n    float trailFront = smoothstep(-.02, .02, st.y-y);\n    trail *= trailFront*r*r;\n    y = UV.y;\n    float trail2 = smoothstep(.2*r, .0, cd);\n    float droplets = max(0., (sin(y*(1.-y)*120.)-st.y))*trail2*trailFront*n.z;\n    y = fract(y*10.)+(st.y-.5);\n    float dd = length(st-vec2(x, y));\n    droplets = smoothstep(.3, 0., dd);\n    float m = mainDrop+droplets*r*trailFront;\n    return vec2(m, trail);\n}\nfloat StaticDrops(vec2 uv, float t) {\n    uv *= 40.;\n    vec2 id = floor(uv);\n    uv = fract(uv)-.5;\n    vec3 n = N13(id.x*107.45+id.y*3543.654);\n    vec2 p = (n.xy-.5)*.7;\n    float d = length(uv-p);\n    float fade = Saw(.025, fract(t+n.z));\n    float c = smoothstep(.3, 0., d)*fract(n.z*10.)*fade;\n    return c;\n}\nvec2 Drops(vec2 uv, float t, float l0, float l1, float l2) {\n    float s = StaticDrops(uv, t)*l0;\n    vec2 m1 = DropLayer2(uv, t)*l1;\n    vec2 m2 = DropLayer2(uv*1.85, t)*l2;\n    float c = s+m1.x+m2.x;\n    c = smoothstep(.3, 1., c);\n    return vec2(c, max(m1.y*l0, m2.y*l1));\n}\nvoid main()\n{\n    vec4 iMouse = vec4(0.0, 0.0, 0.0, 0.0);\n    vec2 fragCoord = vec2(-v_uv0.x * texSize.x + 0.5 * texSize.x, -0.5 * texSize.y + v_uv0.y * texSize.y);\n    vec2 uv = -fragCoord.xy / iResolution.y;\n    vec2 UV = (fragCoord.xy+.5*iResolution.xy) / iResolution.xy;\n    vec3 M = iMouse.xyz/iResolution.xyz;\n    float T = time+M.x*2.;\n    #if HAS_HEART\n        T = mod(time, 102.);\n        T = mix(T, M.x*102., M.z>0.?1.:0.);\n    #endif\n    float t = T*.2;\n    float rainAmount = iMouse.z>0. ? M.y : sin(T*.05)*.3+.7;\n    float maxBlur = mix(3., 6., rainAmount);\n    float minBlur = 2.;\n    float story = 0.;\n    float heart = 0.;\n    #if HAS_HEART\n        story = smoothstep(0., 70., T);\n        t = min(1., T/70.);\n        t = 1.-t;\n        t = (1.-t*t)*70.;\n        float zoom= mix(.3, 1.2, story);\n        uv *=zoom;\n        minBlur = 4.+smoothstep(.5, 1., story)*3.;\n        maxBlur = 6.+smoothstep(.5, 1., story)*1.5;\n        vec2 hv = uv-vec2(.0, -.1);\n        hv.x *= .5;\n        float s = smoothstep(110., 70., T);\n        hv.y-=sqrt(abs(hv.x))*.5*s;\n        heart = length(hv);\n        heart = smoothstep(.4*s, .2*s, heart)*s;\n        rainAmount = heart;\n        maxBlur-=heart;\n        uv *= 1.5;\n        t *= .25;\n    #else\n        float zoom = -cos(T*.2);\n        uv *= .7+zoom*.3;\n    #endif\n    UV = (UV-.5)*(.9+zoom*.1)+.5;\n    float staticDrops = smoothstep(-.5, 1., rainAmount)*2.;\n    float layer1 = smoothstep(.25, .75, rainAmount);\n    float layer2 = smoothstep(.0, .5, rainAmount);\n    vec2 c = Drops(uv, t, staticDrops, layer1, layer2);\n    vec2 e = vec2(.001, 0.);\n    float cx = Drops(uv+e, t, staticDrops, layer1, layer2).x;\n    float cy = Drops(uv+e.yx, t, staticDrops, layer1, layer2).x;\n    vec2 n = vec2(cx-c.x, cy-c.x);\n    #if HAS_HEART\n        n *= 1.-smoothstep(60., 85., T);\n        c.y *= 1.-smoothstep(80., 100., T)*.8;\n    #endif\n    float focus = mix(maxBlur-c.y, minBlur, smoothstep(.1, .2, c.x));\n    vec3 col = texture2D(texture, UV+n).rgb;\n    #if USE_POST_PROCESSING\n        t = (T+3.)*.5;\n        float colFade = sin(t*.2)*.5+.5+story;\n        col *= mix(vec3(1.), vec3(.8, .9, 1.3), colFade);\n        float fade = smoothstep(0., 10., T);\n        float lightning = sin(t*sin(t*10.));\n        lightning *= pow(max(0., sin(t+sin(t))), 10.);\n        col *= 1.+lightning*fade*mix(1., .1, story*story);\n        col *= 1.-dot(UV-=.5, UV);\n        #if HAS_HEART\n            col = mix(pow(col, vec3(1.2)), col, heart);\n            fade *= smoothstep(102., 97., T);\n        #endif\n        #if USE_LAOD_FADE\n        col *= fade;\n        #endif\n    #endif\n    gl_FragColor = vec4(col, 1.);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"HAS_HEART","type":"boolean","defines":[]},{"name":"USE_POST_PROCESSING","type":"boolean","defines":[]},{"name":"USE_LAOD_FADE","type":"boolean","defines":["USE_POST_PROCESSING"]}],"blocks":[{"name":"PROPERTIES","members":[{"name":"color","type":16,"count":1},{"name":"iResolution","type":16,"count":1},{"name":"texSize","type":14,"count":1},{"name":"time","type":13,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"texture","type":29,"count":1,"defines":[],"binding":30}],"record":null,"name":"Rain|vs|fs"}]}